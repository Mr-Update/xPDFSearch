--- xpdf/Catalog.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/Catalog.cc	Wed Mar 13 13:43:05 2019
@@ -63,7 +63,7 @@
     deleteGList(kids, PageTreeNode);
   }
 }
-
+#ifndef NO_EMBEDDED_CONTENT
 //------------------------------------------------------------------------
 // EmbeddedFile
 //------------------------------------------------------------------------
@@ -87,7 +87,7 @@
   delete name;
   streamRef.free();
 }
-
+#endif
 //------------------------------------------------------------------------
 // Catalog
 //------------------------------------------------------------------------
@@ -178,13 +178,13 @@
   // (if acroForm is a null object, this will still create an AcroForm
   // if there are unattached Widget-type annots)
   form = Form::load(doc, this, &acroForm);
-
+#ifndef NO_EMBEDDED_CONTENT
   // get the OCProperties dictionary
   catDict.dictLookup("OCProperties", &ocProperties);
 
   // get the list of embedded files
   readEmbeddedFileList(catDict.getDict());
-
+#endif
   catDict.free();
   return;
 
@@ -226,9 +226,11 @@
     delete form;
   }
   ocProperties.free();
+#ifndef NO_EMBEDDED_CONTENT
   if (embeddedFiles) {
     deleteGList(embeddedFiles, EmbeddedFile);
   }
+#endif
 }
 
 Page *Catalog::getPage(int i) {
@@ -667,7 +669,7 @@
   catDict.free();
   return NULL;
 }
-
+#ifndef NO_EMBEDDED_CONTENT
 void Catalog::readEmbeddedFileList(Dict *catDict) {
   Object obj1, obj2;
   char *touchedObjs;
@@ -832,6 +834,7 @@
   }
   return strObj;
 }
+#endif
 
 TextString *Catalog::getPageLabel(int pageNum) {
   Object catDict, node, pageLabelObj, start, prefix, style;
--- xpdf/Catalog.h	Mon Feb 18 19:24:19 2019
+++ xpdf/Catalog.h	Wed Mar 13 13:43:12 2019
@@ -96,13 +96,14 @@
   // Return the DestOutputProfile stream, or NULL if there isn't one.
   Object *getDestOutputProfile(Object *destOutProf);
 
+#ifndef NO_EMBEDDED_CONTENT
   // Get the list of embedded files.
   int getNumEmbeddedFiles();
   Unicode *getEmbeddedFileName(int idx);
   int getEmbeddedFileNameLength(int idx);
   Object *getEmbeddedFileStreamRef(int idx);
   Object *getEmbeddedFileStreamObj(int idx, Object *strObj);
-
+#endif
   // Get the page label for page number [pageNum].  Returns NULL if
   // the PDF file doesn't have page labels.
   TextString *getPageLabel(int pageNum);
@@ -136,11 +137,13 @@
   int countPageTree(Object *pagesObj);
   void loadPage(int pg);
   void loadPage2(int pg, int relPg, PageTreeNode *node);
+#ifndef NO_EMBEDDED_CONTENT
   void readEmbeddedFileList(Dict *catDict);
   void readEmbeddedFileTree(Object *node);
   void readFileAttachmentAnnots(Object *pageNodeRef,
 				char *touchedObjs);
   void readEmbeddedFile(Object *fileSpec, Object *name1);
+#endif
   GBool findPageLabel(Object *node, int pageIndex,
 		      Object *pageLabelObj, int *firstPageIndex);
   GString *makeRomanNumeral(int num, GBool uppercase);
--- xpdf/PDFDoc.cc	Wed Mar 13 13:52:56 2019
+++ xpdf/PDFDoc.cc	Wed Mar 13 13:44:18 2019
@@ -549,7 +549,7 @@
   fclose(f);
   return gTrue;
 }
-
+#ifndef NO_EMBEDDED_CONTENT
 GBool PDFDoc::saveEmbeddedFile(int idx, const char *path) {
   FILE *f;
   GBool ret;
@@ -640,4 +640,4 @@
   *size = bufSize;
   return buf;
 }
-
+#endif
--- xpdf/PDFDoc.h	Mon Feb 18 19:24:19 2019
+++ xpdf/PDFDoc.h	Wed Mar 13 13:44:24 2019
@@ -177,7 +177,7 @@
 
   // Return a pointer to the PDFCore object.
   PDFCore *getCore() { return core; }
-
+#ifndef NO_EMBEDDED_CONTENT
   // Get the list of embedded files.
   int getNumEmbeddedFiles() { return catalog->getNumEmbeddedFiles(); }
   Unicode *getEmbeddedFileName(int idx)
@@ -189,7 +189,7 @@
   GBool saveEmbeddedFile(int idx, const wchar_t *path, int pathLen);
 #endif
   char *getEmbeddedFileMem(int idx, int *size);
-
+#endif
 
 private:
 
@@ -199,8 +199,9 @@
 	       GBool repairXRef);
   void checkHeader();
   GBool checkEncryption(GString *ownerPassword, GString *userPassword);
+#ifndef NO_EMBEDDED_CONTENT
   GBool saveEmbeddedFile2(int idx, FILE *f);
-
+#endif
   GString *fileName;
 #ifdef _WIN32
   wchar_t *fileNameU;
--- xpdf/Stream.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/Stream.cc	Wed Mar 13 13:45:18 2019
@@ -35,9 +35,15 @@
 #include "Lexer.h"
 #include "GfxState.h"
 #include "Stream.h"
+#ifndef NO_JBIG_STREAM
 #include "JBIG2Stream.h"
+#endif
+#ifndef NO_JPX_STREAM
 #include "JPXStream.h"
+#endif
+#ifndef NO_CCITT_STREAM
 #include "Stream-CCITT.h"
+#endif
 
 #ifdef __DJGPP__
 static GBool setDJSYSFLAGS = gFalse;
@@ -175,10 +181,7 @@
   int colors;
   int bits;
   int early;
-  int encoding;
-  GBool endOfLine, byteAlign, endOfBlock, black;
-  int columns, rows;
-  int colorXform;
+  int columns;
   Object globals, obj;
 
   if (!strcmp(name, "ASCIIHexDecode") || !strcmp(name, "AHx")) {
@@ -216,7 +219,11 @@
     str = new LZWStream(str, pred, columns, colors, bits, early);
   } else if (!strcmp(name, "RunLengthDecode") || !strcmp(name, "RL")) {
     str = new RunLengthStream(str);
-  } else if (!strcmp(name, "CCITTFaxDecode") || !strcmp(name, "CCF")) {
+  }
+#ifndef NO_CCITT_STREAM
+  else if (!strcmp(name, "CCITTFaxDecode") || !strcmp(name, "CCF")) {
+    GBool endOfLine, byteAlign, endOfBlock, black;
+    int encoding, rows;
     encoding = 0;
     endOfLine = gFalse;
     byteAlign = gFalse;
@@ -263,7 +270,11 @@
     }
     str = new CCITTFaxStream(str, encoding, endOfLine, byteAlign,
 			     columns, rows, endOfBlock, black);
-  } else if (!strcmp(name, "DCTDecode") || !strcmp(name, "DCT")) {
+  }
+#endif
+#ifndef NO_DCT_STREAM
+  else if (!strcmp(name, "DCTDecode") || !strcmp(name, "DCT")) {
+    int colorXform;
     colorXform = -1;
     if (params->isDict()) {
       if (params->dictLookup("ColorTransform", &obj, recursion)->isInt()) {
@@ -272,7 +283,9 @@
       obj.free();
     }
     str = new DCTStream(str, colorXform);
-  } else if (!strcmp(name, "FlateDecode") || !strcmp(name, "Fl")) {
+  } 
+#endif
+  else if (!strcmp(name, "FlateDecode") || !strcmp(name, "Fl")) {
     pred = 1;
     columns = 1;
     colors = 1;
@@ -296,15 +309,22 @@
       obj.free();
     }
     str = new FlateStream(str, pred, columns, colors, bits);
-  } else if (!strcmp(name, "JBIG2Decode")) {
+  } 
+#ifndef NO_JBIG_STREAM
+  else if (!strcmp(name, "JBIG2Decode")) {
     if (params->isDict()) {
       params->dictLookup("JBIG2Globals", &globals, recursion);
     }
     str = new JBIG2Stream(str, &globals);
     globals.free();
-  } else if (!strcmp(name, "JPXDecode")) {
+  }
+#endif
+#ifndef NO_JPX_STREAM
+  else if (!strcmp(name, "JPXDecode")) {
     str = new JPXStream(str);
-  } else {
+  }
+#endif
+  else {
     error(errSyntaxError, getPos(), "Unknown filter '{0:s}'", name);
     str = new EOFStream(str);
   }
@@ -1520,7 +1540,7 @@
 //------------------------------------------------------------------------
 // CCITTFaxStream
 //------------------------------------------------------------------------
-
+#ifndef NO_CCITT_STREAM
 CCITTFaxStream::CCITTFaxStream(Stream *strA, int encodingA, GBool endOfLineA,
 			       GBool byteAlignA, int columnsA, int rowsA,
 			       GBool endOfBlockA, GBool blackA):
@@ -2300,11 +2320,11 @@
 GBool CCITTFaxStream::isBinary(GBool last) {
   return str->isBinary(gTrue);
 }
-
+#endif
 //------------------------------------------------------------------------
 // DCTStream
 //------------------------------------------------------------------------
-
+#ifndef NO_DCT_STREAM
 #if HAVE_JPEGLIB
 
 DCTStream::DCTStream(Stream *strA, GBool colorXformA):
@@ -4198,7 +4218,7 @@
 GBool DCTStream::isBinary(GBool last) {
   return str->isBinary(gTrue);
 }
-
+#endif
 //------------------------------------------------------------------------
 // FlateStream
 //------------------------------------------------------------------------
--- xpdf/Stream.h	Mon Feb 18 19:24:19 2019
+++ xpdf/Stream.h	Wed Mar 13 13:45:30 2019
@@ -536,7 +536,7 @@
 //------------------------------------------------------------------------
 // CCITTFaxStream
 //------------------------------------------------------------------------
-
+#ifndef NO_CCITT_STREAM
 struct CCITTCodeTable;
 
 class CCITTFaxStream: public FilterStream {
@@ -586,11 +586,12 @@
   short lookBits(int n);
   void eatBits(int n) { if ((inputBits -= n) < 0) inputBits = 0; }
 };
+#endif
 
 //------------------------------------------------------------------------
 // DCTStream
 //------------------------------------------------------------------------
-
+#ifndef NO_DCT_STREAM
 #if HAVE_JPEGLIB
 
 class DCTStream;
@@ -743,7 +744,7 @@
 
 #endif // HAVE_JPEGLIB
 };
-
+#endif
 //------------------------------------------------------------------------
 // FlateStream
 //------------------------------------------------------------------------
--- xpdf/XFAForm.cc	Wed Mar 13 13:52:56 2019
+++ xpdf/XFAForm.cc	Wed Mar 13 13:45:39 2019
@@ -24,7 +24,9 @@
 #include "Gfx.h"
 #include "GfxFont.h"
 #include "Zoox.h"
+#ifndef NO_BARCODE
 #include "PDF417Barcode.h"
+#endif
 #include "XFAForm.h"
 
 #ifdef _WIN32
@@ -33,7 +35,7 @@
 #endif
 
 //------------------------------------------------------------------------
-
+#ifndef NO_BARCODE
 // 5 bars + 5 spaces -- each can be wide (1) or narrow (0)
 // (there are always exactly 3 wide elements;
 // the last space is always narrow)
@@ -278,7 +280,7 @@
   { 2, 1, 1, 2, 3, 2 }, // start code C
   { 2, 3, 3, 1, 1, 1 }  // stop code (without final bar)
 };
-
+#endif
 //------------------------------------------------------------------------
 
 class XFATableInfo {
@@ -1147,7 +1149,9 @@
 	drawCheckButton(fontDict, xfaW, xfaH, rot3, appearBuf);
 	break;
       } else if (node->isElement("barcode")) {
+#ifndef NO_BARCODE
 	drawBarCode(fontDict, xfaW, xfaH, rot3, appearBuf);
+#endif
 	break;
       }
       //~ other field types go here
@@ -1604,7 +1608,7 @@
   appearBuf->appendf("0.5 w {0:.4f} {1:.4f} m {2:.4f} {3:.4f} l {0:.4f} {3:.4f} m {2:.4f} {1:.4f} l S\n",
 		     x, y, x + w, y + h);
 }
-
+#ifndef NO_BARCODE
 void XFAFormField::drawBarCode(GfxFontDict *fontDict,
 			       double w, double h, int rot,
 			       GString *appearBuf) {
@@ -1835,7 +1839,7 @@
   delete fontName;
   delete value2;
 }
-
+#endif
 Object *XFAFormField::getResources(Object *res) {
   return xfaForm->resourceDict.copy(res);
 }
