--- xpdf/Decrypt.cc	Tue Mar 19 11:27:13 2019
+++ xpdf/Decrypt.cc	Wed Apr  3 13:06:07 2019
@@ -1492,14 +1492,14 @@
   SHA512Uint64 H[8];
   int blkLen, i;
 
-  H[0] = 0x6a09e667f3bcc908LL;
-  H[1] = 0xbb67ae8584caa73bLL;
-  H[2] = 0x3c6ef372fe94f82bLL;
-  H[3] = 0xa54ff53a5f1d36f1LL;
-  H[4] = 0x510e527fade682d1LL;
-  H[5] = 0x9b05688c2b3e6c1fLL;
-  H[6] = 0x1f83d9abfb41bd6bLL;
-  H[7] = 0x5be0cd19137e2179LL;
+  H[0] = 0x6a09e667f3bcc908ULL;
+  H[1] = 0xbb67ae8584caa73bULL;
+  H[2] = 0x3c6ef372fe94f82bULL;
+  H[3] = 0xa54ff53a5f1d36f1ULL;
+  H[4] = 0x510e527fade682d1ULL;
+  H[5] = 0x9b05688c2b3e6c1fULL;
+  H[6] = 0x1f83d9abfb41bd6bULL;
+  H[7] = 0x5be0cd19137e2179ULL;
 
   //blkLen = 0;
   for (i = 0; i + 128 <= msgLen; i += 128) {
@@ -1558,14 +1558,14 @@
   SHA512Uint64 H[8];
   int blkLen, i;
 
-  H[0] = 0xcbbb9d5dc1059ed8LL;
-  H[1] = 0x629a292a367cd507LL;
-  H[2] = 0x9159015a3070dd17LL;
-  H[3] = 0x152fecd8f70e5939LL;
-  H[4] = 0x67332667ffc00b31LL;
-  H[5] = 0x8eb44a8768581511LL;
-  H[6] = 0xdb0c2e0d64f98fa7LL;
-  H[7] = 0x47b5481dbefa4fa4LL;
+  H[0] = 0xcbbb9d5dc1059ed8ULL;
+  H[1] = 0x629a292a367cd507ULL;
+  H[2] = 0x9159015a3070dd17ULL;
+  H[3] = 0x152fecd8f70e5939ULL;
+  H[4] = 0x67332667ffc00b31ULL;
+  H[5] = 0x8eb44a8768581511ULL;
+  H[6] = 0xdb0c2e0d64f98fa7ULL;
+  H[7] = 0x47b5481dbefa4fa4ULL;
 
   //blkLen = 0;
   for (i = 0; i + 128 <= msgLen; i += 128) {
--- xpdf/GlobalParams.cc	Mon Mar 11 09:05:41 2019
+++ xpdf/GlobalParams.cc	Tue Apr  2 16:05:03 2019
@@ -3218,7 +3218,7 @@
   unlockGlobalParams;
 }
 
-GBool GlobalParams::setTextEOL(char *s) {
+GBool GlobalParams::setTextEOL(const char *s) {
   lockGlobalParams;
   if (!strcmp(s, "unix")) {
     textEOL = eolUnix;
--- xpdf/GlobalParams.h	Mon Feb 18 19:24:19 2019
+++ xpdf/GlobalParams.h	Tue Apr  2 16:04:49 2019
@@ -350,7 +350,7 @@
   void setPSOPI(GBool opi);
   void setPSASCIIHex(GBool hex);
   void setTextEncoding(const char *encodingName);
-  GBool setTextEOL(char *s);
+  GBool setTextEOL(const char *s);
   void setTextPageBreaks(GBool pageBreaks);
   void setTextKeepTinyChars(GBool keep);
   void setInitialZoom(char *s);
--- xpdf/XFAForm.cc	Mon Mar 11 12:25:35 2019
+++ xpdf/XFAForm.cc	Wed Apr  3 13:07:07 2019
@@ -2370,7 +2370,7 @@
 // <italic>), and returns the font object ID.  This does not require a
 // GfxFontDict, and it does not do any parsing of font objects beyond
 // looking at BaseFont.
-Ref XFAFormField::findFontName(GString *name, GBool bold, GBool italic) {
+Ref XFAFormField::findFontName(GString *xname, GBool bold, GBool italic) {
   Object fontDictObj, fontObj, baseFontObj, fontRef;
   Ref fontID;
   GString *reqName, *testName;
@@ -2383,8 +2383,8 @@
 
   // remove space chars from the requested name
   reqName = new GString();
-  for (i = 0; i < name->getLength(); ++i) {
-    c = name->getChar(i);
+  for (i = 0; i < xname->getLength(); ++i) {
+    c = xname->getChar(i);
     if (c != ' ') {
       reqName->append(c);
     }
--- xpdf/XFAForm.h	Mon Mar 11 12:34:08 2019
+++ xpdf/XFAForm.h	Wed Apr  3 13:07:04 2019
@@ -150,7 +150,7 @@
 		GfxFontDict *fontDict, GString *appearBuf);
   GfxFont *findFont(GfxFontDict *fontDict, GString *fontName,
 		    GBool bold, GBool italic);
-  Ref findFontName(GString *name, GBool bold, GBool italic);
+  Ref findFontName(GString *xname, GBool bold, GBool italic);
   void getNextLine(GString *text, int start,
 		   GfxFont *font, double fontSize, double wMax,
 		   int *end, double *width, int *next);
