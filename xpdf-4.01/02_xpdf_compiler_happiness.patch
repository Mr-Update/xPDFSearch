--- fofi/FoFiIdentifier.cc	Mon Feb 18 19:24:19 2019
+++ fofi/FoFiIdentifier.cc	Wed Mar  6 12:24:09 2019
@@ -806,7 +806,7 @@
   Guchar *resMap;
   int fileLength, resMapOffset, resMapLength;
   int resTypeListOffset, resNameListOffset, nTypes;
-  int refListOffset, nFonts, nameOffset, nameLen;
+  int refListOffset = 0, nFonts, nameOffset, nameLen;
   int offset, i;
   GList *ret;
 
--- fofi/FoFiType1C.cc	Mon Feb 18 19:24:19 2019
+++ fofi/FoFiType1C.cc	Wed Feb 27 13:25:49 2019
@@ -1296,7 +1296,7 @@
     if (!ok) {
       break;
     }
-    if (ops[nOps - 1].kind == type1COpOperator) {
+    if ((nOps > 0) && (ops[nOps - 1].kind == type1COpOperator)) {
       --nOps; // drop the operator
       switch (ops[nOps].op) {
       case 0x0001:		// hstem
@@ -2339,7 +2339,7 @@
     if (!parsedOk) {
       break;
     }
-    if (ops[nOps - 1].kind == type1COpOperator) {
+    if ((nOps > 0) && (ops[nOps - 1].kind == type1COpOperator)) {
       --nOps; // drop the operator
       if (topDict.firstOp < 0) {
 	topDict.firstOp = ops[nOps].op;
@@ -2409,7 +2409,7 @@
     if (!parsedOk) {
       return;
     }
-    if (ops[nOps - 1].kind == type1COpOperator) {
+    if ((nOps > 0) && (ops[nOps - 1].kind == type1COpOperator)) {
       if (ops[nOps - 1].op == 0x0012) {
 	if (nOps < 3) {
 	  parsedOk = gFalse;
@@ -2481,7 +2481,7 @@
     if (!parsedOk) {
       break;
     }
-    if (ops[nOps - 1].kind == type1COpOperator) {
+    if ((nOps > 0) && (ops[nOps - 1].kind == type1COpOperator)) {
       --nOps; // drop the operator
       switch (ops[nOps].op) {
       case 0x0006:
--- goo/gfile.cc	Wed Mar 13 13:52:56 2019
+++ goo/gfile.cc	Mon Mar 11 08:42:58 2019
@@ -13,6 +13,8 @@
 #ifdef _WIN32
 #  include <time.h>
 #  include <direct.h>
+#  include <Windows.h>
+#  include <shellapi.h>
 #else
 #  if !defined(ACORN)
 #    include <sys/types.h>
--- goo/GString.cc	Mon Feb 18 19:24:19 2019
+++ goo/GString.cc	Wed Mar  6 12:17:54 2019
@@ -130,51 +130,67 @@
   }
 }
 
-GString::GString() {
-  s = NULL;
+GString::GString() 
+  : s(NULL)
+{
   resize(length = 0);
   s[0] = '\0';
 }
 
-GString::GString(const char *sA) {
+GString::GString(const char *sA) 
+  : s(NULL)
+{
+  if (sA)
+  {
   int n = (int)strlen(sA);
 
-  s = NULL;
   resize(length = n);
+    if (s)
   memcpy(s, sA, n + 1);
 }
+}
 
-GString::GString(const char *sA, int lengthA) {
-  s = NULL;
+GString::GString(const char *sA, int lengthA) 
+  : s(NULL)
+{
   resize(length = lengthA);
+  if (s && sA)
+  {
   memcpy(s, sA, length * sizeof(char));
   s[length] = '\0';
 }
+}
 
-GString::GString(GString *str, int idx, int lengthA) {
-  s = NULL;
+GString::GString(GString *str, int idx, int lengthA) 
+  : s(NULL)
+{
   resize(length = lengthA);
   memcpy(s, str->getCString() + idx, length);
   s[length] = '\0';
 }
 
-GString::GString(GString *str) {
-  s = NULL;
+GString::GString(GString *str) 
+  : s(NULL)
+{
   resize(length = str->getLength());
   memcpy(s, str->getCString(), length + 1);
 }
 
-GString::GString(GString *str1, GString *str2) {
+GString::GString(GString *str1, GString *str2) 
+  :s(NULL)
+{
   int n1 = str1->getLength();
   int n2 = str2->getLength();
 
-  s = NULL;
   if (n1 > INT_MAX - n2) {
     gMemError("Integer overflow in GString::GString()");
   }
   resize(length = n1 + n2);
+  if (s)
+  {
   memcpy(s, str1->getCString(), n1);
   memcpy(s + n1, str2->getCString(), n2 + 1);
+  }
 }
 
 GString *GString::fromInt(int x) {
--- xpdf/AcroForm.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/AcroForm.cc	Mon Mar 11 12:27:47 2019
@@ -1413,7 +1413,7 @@
 void AcroFormField::setColor(Array *a, GBool fill, int adjust,
 			     GString *appearBuf) {
   Object obj1;
-  double color[4];
+  double color[4] = { 0 };
   int nComps, i;
 
   nComps = a->getLength();
--- xpdf/Annot.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/Annot.cc	Mon Mar 11 12:26:53 2019
@@ -795,7 +795,6 @@
 
   annotObj.free();
 }
-
 void Annot::setLineStyle(AnnotBorderStyle *bs, double *lineWidth) {
   double *dash;
   double w;
@@ -839,7 +838,7 @@
 
 GBool Annot::setFillColor(Object *colorObj) {
   Object obj;
-  double color[4];
+  double color[4] = { 0 };
   int i;
 
   if (!colorObj->isArray()) {
--- xpdf/Function.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/Function.cc	Mon Mar 11 08:53:56 2019
@@ -418,7 +418,7 @@
 
 void SampledFunction::transform(double *in, double *out) {
   double x;
-  int e[funcMaxInputs];
+  int e[funcMaxInputs] = { 0 };
   double efrac0[funcMaxInputs];
   double efrac1[funcMaxInputs];
   int i, j, k, idx0, t;
@@ -958,13 +958,20 @@
  err1:
   return;
 }
-
-PostScriptFunction::PostScriptFunction(PostScriptFunction *func) {
-  memcpy((void *)this, (void *)func, sizeof(PostScriptFunction));
+PostScriptFunction::PostScriptFunction(PostScriptFunction *func) 
+  : codeString(NULL)
+  , code(NULL)
+  , codeSize(0)
+  , ok(gFalse)
+{
+  if (func && (func != this))
+  {
+    memcpy(this, func, sizeof(PostScriptFunction));
   codeString = func->codeString->copy();
   code = (PSCode *)gmallocn(codeSize, sizeof(PSCode));
   memcpy(code, func->code, codeSize * sizeof(PSCode));
 }
+}
 
 PostScriptFunction::~PostScriptFunction() {
   gfree(code);
@@ -1029,7 +1036,7 @@
   int a, b, mid, cmp;
   int codePtr0, codePtr1;
 
-  while (1) {
+  while (code) {
     if (*tokPtr >= tokens->getLength()) {
       error(errSyntaxError, -1,
 	    "Unexpected end of PostScript function stream");
@@ -1152,10 +1159,12 @@
     }
     code = (PSCode *)greallocn(code, codeSize, sizeof(PSCode));
   }
+  if (code) {
   code[*codePtr].op = op;
   code[*codePtr].val.d = x;
   ++(*codePtr);
 }
+}
 
 GString *PostScriptFunction::getToken(Stream *str) {
   GString *s;
@@ -1214,7 +1223,7 @@
 
   sp = sp0;
   ip = 0;
-  while (ip < codeLen) {
+  while (code && (ip < codeLen)) {
     c = &code[ip++];
     switch(c->op) {
     case psOpAbs:
--- xpdf/Gfx.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/Gfx.cc	Thu Feb 28 11:53:12 2019
@@ -2546,11 +2546,12 @@
   double sMin, sMax, tmp;
   double ux0, uy0, ux1, uy1, vx0, vy0, vx1, vy1;
   double t0, t1, tt;
-  GfxColor colors[axialSplits];
+  GfxColor* colors = new GfxColor[axialSplits];
   int abortCheckCounter, nComps, i, j, k;
 
   if (out->useShadedFills() &&
       out->axialShadedFill(state, shading)) {
+    delete[] colors;
     return;
   }
 
@@ -2829,6 +2830,7 @@
     out->fill(state);
     state->clearPath();
   }
+  delete [] colors;
 }
 
 #if defined(__GNUC__) && !defined(__clang__)
@@ -4546,7 +4548,6 @@
 	str->discardChars(n);
 	str->close();
       }
-
     // draw it
     } else {
       if (haveSoftMask) {
@@ -4554,7 +4555,6 @@
 				 maskStr, maskWidth, maskHeight, maskColorMap,
 				 haveMatte ? matte : (double *)NULL,
 				 interpolate);
-	delete maskColorMap;
       } else if (haveExplicitMask) {
 	out->drawMaskedImage(state, ref, str, width, height, colorMap,
 			     maskStr, maskWidth, maskHeight, maskInvert,
@@ -4565,7 +4565,8 @@
 		       interpolate);
       }
     }
-
+    if (maskColorMap)
+        delete maskColorMap;
     delete colorMap;
     maskObj.free();
     smaskObj.free();
--- xpdf/GfxState.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/GfxState.cc	Wed Mar  6 12:38:09 2019
@@ -1147,7 +1147,7 @@
 GfxColor *GfxIndexedColorSpace::mapColorToBase(GfxColor *color,
 					       GfxColor *baseColor) {
   Guchar *p;
-  double low[gfxColorMaxComps], range[gfxColorMaxComps];
+  double low[gfxColorMaxComps] = { 0 }, range[gfxColorMaxComps] = { 1 };
   int n, i, k;
 
   n = base->getNComps();
@@ -2767,6 +2767,10 @@
       vertSize = (vertSize == 0) ? 16 : 2 * vertSize;
       verticesA = (GfxGouraudVertex *)
 	              greallocn(verticesA, vertSize, sizeof(GfxGouraudVertex));
+    }
+    if (!verticesA) {
+      delete bitBuf;
+      return NULL;
     }
     verticesA[nVerticesA].x = xMin + xMul * (double)x;
     verticesA[nVerticesA].y = yMin + yMul * (double)y;
--- xpdf/GlobalParams.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/GlobalParams.cc	Mon Mar 11 09:05:41 2019
@@ -17,6 +17,7 @@
 #include <ctype.h>
 #ifdef _WIN32
 #  include <shlobj.h>
+   typedef BOOL (__stdcall *FNSHGETSPECIALFOLDERPATH)(HWND,LPSTR,int,BOOL);
 #endif
 #if HAVE_PAPER_H
 #include <paper.h>
@@ -697,9 +698,10 @@
   }
   if (!f) {
 #ifdef _WIN32
-    char buf[512];
-    i = GetModuleFileNameA(NULL, buf, sizeof(buf));
-    if (i <= 0 || i >= sizeof(buf)) {
+    char buf[MAX_PATH];
+    DWORD n;
+    n = GetModuleFileNameA(NULL, buf, sizeof(buf));
+    if (n == 0 || n >= sizeof(buf)) {
       // error or path too long for buffer - just use the current dir
       buf[0] = '\0';
     }
@@ -1903,24 +1905,19 @@
 
 #ifdef _WIN32
 static void getWinFontDir(char *winFontDir) {
-  HMODULE shell32Lib;
-  BOOL (__stdcall *SHGetSpecialFolderPathFunc)(HWND hwndOwner,
-					       LPSTR lpszPath,
-					       int nFolder,
-					       BOOL fCreate);
   char *p;
-  int i;
+  size_t i;
+  HMODULE shell32Lib;
 
   // SHGetSpecialFolderPath isn't available in older versions of
   // shell32.dll (Win95 and WinNT4), so do a dynamic load
   winFontDir[0] = '\0';
   if ((shell32Lib = LoadLibraryA("shell32.dll"))) {
-    if ((SHGetSpecialFolderPathFunc = 
-	 (BOOL (__stdcall *)(HWND hwndOwner, LPSTR lpszPath,
-			     int nFolder, BOOL fCreate))
-	 GetProcAddress(shell32Lib, "SHGetSpecialFolderPathA"))) {
-      if (!(*SHGetSpecialFolderPathFunc)(NULL, winFontDir,
-					 CSIDL_FONTS, FALSE)) {
+    FNSHGETSPECIALFOLDERPATH SHGetSpecialFolderPathFunc; 
+    SHGetSpecialFolderPathFunc = (FNSHGETSPECIALFOLDERPATH)((LPVOID)
+	    GetProcAddress(shell32Lib, "SHGetSpecialFolderPathA"));
+	if (SHGetSpecialFolderPathFunc) {
+      if (!SHGetSpecialFolderPathFunc(NULL, winFontDir, CSIDL_FONTS, FALSE)) {
 	winFontDir[0] = '\0';
       }
       // kludge: Terminal Server changes CSIDL_FONTS to something like
@@ -1934,13 +1931,14 @@
 	}
       }
     }
+    FreeLibrary(shell32Lib);
   }
   // if something went wrong, or we're on a Terminal Server, try using
   // %SYSTEMROOT%\Fonts
   if (!winFontDir[0]) {
     GetSystemWindowsDirectoryA(winFontDir, MAX_PATH - 6);
     winFontDir[MAX_PATH - 7] = '\0';
-    i = (int)strlen(winFontDir);
+    i = strlen(winFontDir);
     if (winFontDir[i-1] != '\\') {
       winFontDir[i++] = '\\';
     }
@@ -3378,32 +3376,36 @@
 
 #ifdef _WIN32
 void GlobalParams::setWin32ErrorInfo(const char *func, DWORD code) {
-  XpdfWin32ErrorInfo *errorInfo;
-
   if (tlsWin32ErrorInfo == TLS_OUT_OF_INDEXES) {
     return;
   }
-  errorInfo = (XpdfWin32ErrorInfo *)TlsGetValue(tlsWin32ErrorInfo);
+  XpdfWin32ErrorInfo *errorInfo = (XpdfWin32ErrorInfo *)TlsGetValue(tlsWin32ErrorInfo);
   if (!errorInfo) {
     errorInfo = new XpdfWin32ErrorInfo();
+    if (errorInfo) {
+        errorInfo->func = func;
+        errorInfo->code = code;
     TlsSetValue(tlsWin32ErrorInfo, errorInfo);
   }
+  }
+  else {
   errorInfo->func = func;
   errorInfo->code = code;
 }
+}
 
 XpdfWin32ErrorInfo *GlobalParams::getWin32ErrorInfo() {
-  XpdfWin32ErrorInfo *errorInfo;
-
   if (tlsWin32ErrorInfo == TLS_OUT_OF_INDEXES) {
     return NULL;
   }
-  errorInfo = (XpdfWin32ErrorInfo *)TlsGetValue(tlsWin32ErrorInfo);
+  XpdfWin32ErrorInfo *errorInfo = (XpdfWin32ErrorInfo *)TlsGetValue(tlsWin32ErrorInfo);
   if (!errorInfo) {
     errorInfo = new XpdfWin32ErrorInfo();
-    TlsSetValue(tlsWin32ErrorInfo, errorInfo);
+    if (errorInfo) {
     errorInfo->func = NULL;
     errorInfo->code = 0;
+        TlsSetValue(tlsWin32ErrorInfo, errorInfo);
+    }
   }
   return errorInfo;
 }
--- xpdf/JBIG2Stream.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/JBIG2Stream.cc	Thu Feb 28 11:53:12 2019
@@ -1504,7 +1504,7 @@
   JBIG2Bitmap *collBitmap, *refBitmap;
   Guint *symWidths;
   Guint symHeight, symWidth, totalWidth, x, symID;
-  int dh, dw, refAggNum, refDX, refDY, bmSize;
+  int dh = 0, dw, refAggNum, refDX, refDY, bmSize;
   GBool ex;
   int run, cnt;
   Guint i, j, k;
--- xpdf/JPXStream.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/JPXStream.cc	Thu Feb 28 11:52:39 2019
@@ -3337,7 +3337,9 @@
   if ((c0 = bufStr->getChar()) == EOF) {
     return gFalse;
   }
+  if (x) {
   *x = (Guint)c0;
+  }
   return gTrue;
 }
 
--- xpdf/Object.h	Mon Feb 18 19:24:19 2019
+++ xpdf/Object.h	Wed Mar  6 12:33:45 2019
@@ -221,7 +221,7 @@
   static GAtomicCounter		// number of each type of object
     numAlloc[numObjTypes];	//   currently allocated
 #else
-  static int			// number of each type of object
+  static long			// number of each type of object
     numAlloc[numObjTypes];	//   currently allocated
 #endif
 #endif
--- xpdf/Page.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/Page.cc	Mon Mar 11 12:26:53 2019
@@ -334,9 +334,6 @@
   PDFRectangle box;
   Gfx *gfx;
   Object obj;
-  Annots *annotList;
-  Form *form;
-  int i;
 
   if (!out->checkPageSlice(this, hDPI, vDPI, rotate, useMediaBox, crop,
 			   sliceX, sliceY, sliceW, sliceH,
@@ -377,10 +374,14 @@
 
   // draw (non-form) annotations
   if (globalParams->getDrawAnnotations()) {
+    Annots *annotList;
     annotList = new Annots(doc, getAnnots(&obj));
     obj.free();
+
     annotList->generateAnnotAppearances();
+
     if (annotList->getNumAnnots() > 0) {
+      int i;
       if (globalParams->getPrintCommands()) {
 	printf("***** Annotations\n");
       }
@@ -396,6 +397,7 @@
 
   // draw form fields
   if (globalParams->getDrawFormFields()) {
+    Form *form;
     if ((form = doc->getCatalog()->getForm())) {
       if (!(abortCheckCbk && (*abortCheckCbk)(abortCheckCbkData))) {
 	form->draw(num, gfx, printing);
--- xpdf/PDF417Barcode.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/PDF417Barcode.cc	Wed Feb 27 14:21:03 2019
@@ -54,7 +54,7 @@
 
 // textCompaction[char][submode] = base-30 value
 //                                 or 30 if char isn't available
-static char textCompaction[128][4] = {
+static const char textCompaction[128][4] = {
   { 30, 30, 30, 30 },  //   0
   { 30, 30, 30, 30 },  //   1
   { 30, 30, 30, 30 },  //   2
@@ -185,31 +185,31 @@
   { 30, 30, 30, 30 }   // 127
 };
 
-static int errorCorrectionCoeffLevel0[2] = {
+static const int errorCorrectionCoeffLevel0[2] = {
   27, 917
 };
 
-static int errorCorrectionCoeffLevel1[4] = {
+static const int errorCorrectionCoeffLevel1[4] = {
   522, 568, 723, 809
 };
 
-static int errorCorrectionCoeffLevel2[8] = {
+static const int errorCorrectionCoeffLevel2[8] = {
   237, 308, 436, 284, 646, 653, 428, 379
 };
 
-static int errorCorrectionCoeffLevel3[16] = {
+static const int errorCorrectionCoeffLevel3[16] = {
   274, 562, 232, 755, 599, 524, 801, 132,
   295, 116, 442, 428, 295,  42, 176,  65
 };
 
-static int errorCorrectionCoeffLevel4[32] = {
+static const int errorCorrectionCoeffLevel4[32] = {
   361, 575, 922, 525, 176, 586, 640, 321,
   536, 742, 677, 742, 687, 284, 193, 517,
   273, 494, 263, 147, 593, 800, 571, 320,
   803, 133, 231, 390, 685, 330,  63, 410
 };
 
-static int errorCorrectionCoeffLevel5[64] = {
+static const int errorCorrectionCoeffLevel5[64] = {
   539, 422,   6,  93, 862, 771, 453, 106,
   610, 287, 107, 505, 733, 877, 381, 612,
   723, 476, 462, 172, 430, 609, 858, 822,
@@ -220,7 +220,7 @@
   840, 629,   4, 381, 843, 623, 264, 543
 };
 
-static int errorCorrectionCoeffLevel6[128] = {
+static const int errorCorrectionCoeffLevel6[128] = {
   521, 310, 864, 547, 858, 580, 296, 379,
    53, 779, 897, 444, 400, 925, 749, 415,
   822,  93, 217, 208, 928, 244, 583, 620,
@@ -239,7 +239,7 @@
   834, 315, 550,  86, 801,   4, 108, 539
 };
 
-static int errorCorrectionCoeffLevel7[256] = {
+static const int errorCorrectionCoeffLevel7[256] = {
   524, 894,  75, 766, 882, 857,  74, 204,
    82, 586, 708, 250, 905, 786, 138, 720,
   858, 194, 311, 913, 275, 190, 375, 850,
@@ -274,7 +274,7 @@
   307, 159, 924, 558, 648,  55, 497,  10
 };
 
-static int errorCorrectionCoeffLevel8[512] = {
+static const int errorCorrectionCoeffLevel8[512] = {
   352,  77, 373, 504,  35, 599, 428, 207,
   409, 574, 118, 498, 285, 380, 350, 492,
   197, 265, 920, 155, 914, 299, 229, 643,
@@ -341,7 +341,7 @@
   675, 410, 389, 244,  31, 121, 303, 263
 };
 
-static int *errorCorrectionCoeff[maxErrorCorrectionLevel + 1] = {
+static const int *errorCorrectionCoeff[maxErrorCorrectionLevel + 1] = {
   errorCorrectionCoeffLevel0,
   errorCorrectionCoeffLevel1,
   errorCorrectionCoeffLevel2,
@@ -354,15 +354,15 @@
 };
 
 #define startPatternLength 8
-static char startPattern[startPatternLength] = {8,1,1,1,1,1,1,3};
+static const char startPattern[startPatternLength] = {8,1,1,1,1,1,1,3};
 
 #define stopPatternLength 9
-static char stopPattern[stopPatternLength] = {7,1,1,3,1,1,1,2,1};
+static const char stopPattern[stopPatternLength] = {7,1,1,3,1,1,1,2,1};
 
 #define patternLength 8
 
 // patterns[codeword][cluster][element] = element (bar or space) width
-static char patterns[929][3][patternLength] = {
+static const char patterns[929][3][patternLength] = {
   {{3,1,1,1,1,1,3,6}, {5,1,1,1,1,1,2,5}, {2,1,1,1,1,1,5,5}},
   {{4,1,1,1,1,1,4,4}, {6,1,1,1,1,1,3,3}, {3,1,1,1,1,1,6,3}},
   {{5,1,1,1,1,1,5,2}, {4,1,1,1,1,2,1,6}, {1,1,1,1,1,2,4,6}},
@@ -1319,7 +1319,7 @@
 			double moduleWidth, double moduleHeight,
 			double fieldWidth, double fieldHeight,
 			GString *appearBuf);
-static void drawPattern(int &x, int y, char *pattern, int length,
+static void drawPattern(int &x, int y, const char *pattern, int length,
 			GString *appearBuf);
 
 //------------------------------------------------------------------------
@@ -1830,11 +1830,10 @@
 // Compute the error correction codewords and add to codewords[].
 static void makeErrorCorrectionCodewords(int errorCorrectionLevel,
 					 int *codewords, int length) {
-  int e[1 << (maxErrorCorrectionLevel + 1)];
+  int e[1 << (maxErrorCorrectionLevel + 1)] = { 0 };
+  errorCorrectionLevel = errorCorrectionLevel >= 0 ? errorCorrectionLevel : 0;
   int k = 1 << (errorCorrectionLevel + 1);
-  for (int i = 0; i < k; ++i) {
-    e[i] = 0;
-  }
+
   for (int i = 0; i < length; ++i) {
     int t1 = (codewords[i] + e[k-1]) % 929;
     int t2, t3;
@@ -1871,7 +1870,7 @@
 		     moduleWidth, moduleHeight, x0, y0);
 
   int i = 0;
-  for (int row = 0; row < nRows; ++row) {
+  for (int row = 0; (row < nRows) && (nCols > 0); ++row) {
     int cluster = row % 3;
     int y = nRows - 1 - row;
     int left = 0;
@@ -1905,7 +1904,7 @@
   appearBuf->append("Q\n");
 }
 
-static void drawPattern(int &x, int y, char *pattern, int length,
+static void drawPattern(int &x, int y, const char *pattern, int length,
 			GString *appearBuf) {
   for (int i = 0; i < length; ++i) {
     if (!(i & 1)) {
--- xpdf/Stream.cc	Wed Mar 13 13:55:31 2019
+++ xpdf/Stream.cc	Mon Mar 11 13:22:57 2019
@@ -684,7 +684,7 @@
   SharedFile(FILE *fA);
   SharedFile *copy();
   void free();
-  int readBlock(char *buf, GFileOffset pos, int size);
+  size_t readBlock(char *buf, GFileOffset pos, size_t size);
   GFileOffset getSize();
 
 private:
@@ -738,14 +738,14 @@
   }
 }
 
-int SharedFile::readBlock(char *buf, GFileOffset pos, int size) {
-  int n;
+size_t SharedFile::readBlock(char *buf, GFileOffset pos, size_t size) {
+  size_t n;
 
 #if MULTITHREADED
   gLockMutex(&mutex);
 #endif
   gfseek(f, pos, SEEK_SET);
-  n = (int)fread(buf, 1, size, f);
+  n = fread(buf, 1, size, f);
 #if MULTITHREADED
   gUnlockMutex(&mutex);
 #endif
@@ -835,15 +835,15 @@
 }
 
 GBool FileStream::fillBuf() {
-  int n;
+  size_t n;
 
-  bufPos += (int)(bufEnd - buf);
+  bufPos += (GFileOffset)(bufEnd - buf);
   bufPtr = bufEnd = buf;
   if (limited && bufPos >= start + length) {
     return gFalse;
   }
-  if (limited && bufPos + fileStreamBufSize > start + length) {
-    n = (int)(start + length - bufPos);
+  if (limited && (bufPos + fileStreamBufSize > start + length)) {
+    n = start + length - bufPos;
   } else {
     n = fileStreamBufSize;
   }
@@ -1386,7 +1386,7 @@
   newChar = seqBuf[0];
   if (first) {
     first = gFalse;
-  } else {
+  } else if (nextCode < 4097) {
     table[nextCode].length = nextLength;
     table[nextCode].head = prevCode;
     table[nextCode].tail = (Guchar)newChar;
@@ -4855,6 +4855,8 @@
 FlateStream::FlateStream(Stream *strA, int predictor, int columns,
 			 int colors, int bits):
     FilterStream(strA) {
+  buf = new Guchar[flateWindow];
+  memset(buf, 0, flateWindow);
   if (predictor != 1) {
     pred = new StreamPredictor(this, predictor, columns, colors, bits);
     if (!pred->isOk()) {
@@ -4866,7 +4868,6 @@
   }
   litCodeTab.codes = NULL;
   distCodeTab.codes = NULL;
-  memset(buf, 0, flateWindow);
 }
 
 FlateStream::~FlateStream() {
@@ -4880,6 +4881,10 @@
     delete pred;
   }
   delete str;
+
+  if (buf) {
+    delete[] buf;
+  }
 }
 
 Stream *FlateStream::copy() {
@@ -5261,8 +5266,8 @@
 
 // Convert an array <lengths> of <n> lengths, in value order, into a
 // Huffman code lookup table.
-void FlateStream::compHuffmanCodes(int *lengths, int n, FlateHuffmanTab *tab) {
-  int tabSize, len, code, code2, skip, val, i, t;
+void FlateStream::compHuffmanCodes(int *lengths, unsigned int n, FlateHuffmanTab *tab) {
+  unsigned int tabSize, len, code, code2, skip, val, i, t;
 
   // find max code length
   tab->maxLen = 0;
@@ -5299,8 +5304,8 @@
 
 	// fill in the table entries
 	for (i = code2; i < tabSize; i += skip) {
-	  tab->codes[i].len = (Gushort)len;
-	  tab->codes[i].val = (Gushort)val;
+          tab->codes[i].len = len & 0xFFFF;
+          tab->codes[i].val = val & 0xFFFF;
 	}
 
 	++code;
@@ -5321,7 +5326,7 @@
     codeSize += 8;
   }
   code = &tab->codes[codeBuf & ((1 << tab->maxLen) - 1)];
-  if (codeSize == 0 || codeSize < code->len || code->len == 0) {
+  if (codeSize == 0 || code->len == 0 || codeSize < code->len) {
     return EOF;
   }
   codeBuf >>= code->len;
--- xpdf/Stream.h	Wed Mar 13 13:55:31 2019
+++ xpdf/Stream.h	Mon Mar 11 13:18:21 2019
@@ -749,12 +749,12 @@
 // FlateStream
 //------------------------------------------------------------------------
 
-#define flateWindow          32768    // buffer size
+#define flateWindow          32768U    // buffer size
 #define flateMask            (flateWindow-1)
-#define flateMaxHuffman         15    // max Huffman code length
-#define flateMaxCodeLenCodes    19    // max # code length codes
-#define flateMaxLitCodes       288    // max # literal codes
-#define flateMaxDistCodes       30    // max # distance codes
+#define flateMaxHuffman         15U    // max Huffman code length
+#define flateMaxCodeLenCodes    19U    // max # code length codes
+#define flateMaxLitCodes       288U    // max # literal codes
+#define flateMaxDistCodes       30U    // max # distance codes
 
 // Huffman code table entry
 struct FlateCode {
@@ -764,7 +764,7 @@
 
 struct FlateHuffmanTab {
   FlateCode *codes;
-  int maxLen;
+  unsigned int maxLen;
 };
 
 // Decoding info for length and distance code words
@@ -792,7 +792,7 @@
 private:
 
   StreamPredictor *pred;	// predictor
-  Guchar buf[flateWindow];	// output data buffer
+  Guchar* buf;	// output data buffer
   int index;			// current index into output buffer
   int remain;			// number valid bytes in output buffer
   int codeBuf;			// input buffer
@@ -821,7 +821,7 @@
   GBool startBlock();
   void loadFixedCodes();
   GBool readDynamicCodes();
-  void compHuffmanCodes(int *lengths, int n, FlateHuffmanTab *tab);
+  void compHuffmanCodes(int *lengths, unsigned int n, FlateHuffmanTab *tab);
   int getHuffmanCodeWord(FlateHuffmanTab *tab);
   int getCodeWord(int bits);
 };
--- xpdf/Zoox.cc	Mon Feb 18 19:24:19 2019
+++ xpdf/Zoox.cc	Wed Feb 27 15:11:57 2019
@@ -25,7 +25,7 @@
 
 //------------------------------------------------------------------------
 
-static char nameStartChar[256] = {
+static const char nameStartChar[256] = {
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20
@@ -44,7 +44,7 @@
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1  // f0
 };
 
-static char nameChar[256] = {
+static const char nameChar[256] = {
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 10
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, // 20
